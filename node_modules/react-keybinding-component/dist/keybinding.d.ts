import * as React from 'react';
import * as PropTypes from 'prop-types';
interface KeybindingProps {
    onKey: (e: KeyboardEvent) => void;
    type: 'keydown' | 'keyup';
    target: string | HTMLElement | Document | Window;
    preventInputConflict: boolean;
    preventDefault: boolean;
    stopPropagation: boolean;
}
declare class Keybinding extends React.Component<KeybindingProps> {
    static defaultProps: {
        type: string;
        target: Document;
        preventInputConflict: boolean;
        preventDefault: boolean;
        stopPropagation: boolean;
    };
    static propTypes: {
        onKey: PropTypes.Requireable<(...args: any[]) => any>;
        type: PropTypes.Requireable<string>;
        target: PropTypes.Requireable<string | object>;
        preventInputConflict: PropTypes.Requireable<boolean>;
        preventDefault: PropTypes.Requireable<boolean>;
        stopPropagation: PropTypes.Requireable<boolean>;
    };
    targetsBlacklist: string[];
    constructor(props: KeybindingProps);
    render(): null;
    onKey(e: Event): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
}
export default Keybinding;
