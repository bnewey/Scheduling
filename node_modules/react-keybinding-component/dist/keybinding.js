"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var React = require("react");
var PropTypes = require("prop-types");
var Keybinding = /** @class */ (function (_super) {
    __extends(Keybinding, _super);
    function Keybinding(props) {
        var _this = _super.call(this, props) || this;
        _this.targetsBlacklist = ['textarea', 'input', 'select'];
        _this.state = {};
        _this.onKey = _this.onKey.bind(_this);
        return _this;
    }
    Keybinding.prototype.render = function () {
        return null;
    };
    Keybinding.prototype.onKey = function (e) {
        if (this.props.preventDefault)
            e.preventDefault();
        if (this.props.stopPropagation)
            e.stopPropagation();
        var target = e.target;
        if (target) {
            var canDispatch = !(this.props.preventInputConflict && (this.targetsBlacklist.indexOf(target.tagName.toLowerCase()) > -1));
            if (canDispatch && this.props.onKey)
                this.props.onKey(e);
        }
    };
    Keybinding.prototype.componentDidMount = function () {
        var _a = this.props, target = _a.target, type = _a.type;
        if (typeof target === 'string') {
            var element = document.querySelector(target);
            if (!element)
                throw (new Error("Selector \"" + target + "\" returned null (on keybinding mount)"));
            element.addEventListener(type, this.onKey);
        }
        else if (typeof target === 'object') {
            target.addEventListener(type, this.onKey);
        }
        ;
    };
    Keybinding.prototype.componentWillUnmount = function () {
        var _a = this.props, target = _a.target, type = _a.type;
        if (typeof target === 'string') {
            var element = document.querySelector(target);
            if (!element)
                throw (new Error("Selector \"" + target + "\" returned null (on keybinding unmount)"));
            element.removeEventListener(type, this.onKey);
        }
        else if (typeof target === 'object') {
            target.removeEventListener(type, this.onKey);
        }
    };
    Keybinding.defaultProps = {
        type: 'keydown',
        target: document,
        preventInputConflict: false,
        preventDefault: false,
        stopPropagation: false
    };
    Keybinding.propTypes = {
        onKey: PropTypes.func,
        type: PropTypes.string,
        target: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
        preventInputConflict: PropTypes.bool,
        preventDefault: PropTypes.bool,
        stopPropagation: PropTypes.bool
    };
    return Keybinding;
}(React.Component));
exports["default"] = Keybinding;
//# sourceMappingURL=keybinding.js.map